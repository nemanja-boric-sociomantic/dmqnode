; DMQ node configuration
; This example file shows typical configuration for a live server, also suitable
; for use locally.

; Basic server configuration
;
; address: IP address on which the server should be listening.
; port: Port on which the server should be listening for legacy requests.
; neoport: Port on which the server should be listening for neo requests.
; cpu: index of CPU core to bind to (0-based). Negative means bind to any core.
; size_limit: Size limit for node, in bytes. If set to 0, no limit is applied.
; channel_size_limit: Size limit for each channel. When a request is performed
;   on a new channel, this many bytes are allocated.
; data_dir: Directory where the data is stored.
; connection_limit: Maximum number of client connections which will be accepted.
; backlog: Size of the queue of pending connections. Passed to listen().
; unix_socket_path: Path of unix socket on which the node will listen for
;   commands.

[Server]

address = 127.0.0.1
port = 10000
neoport = 10001
cpu = -1
size_limit = 0
channel_size_limit = 10000000
data_dir = data
connection_limit = 5000
backlog = 2048
unix_socket_path = dmq.socket


; Channel sizes by ID
;
; Optionally, overrides [Server]->channel_size_limit for channels with specific
; IDs (channel names). The value specifies the channel size (in bytes) for each
; channel whose ID/channel name starts with the key.

[ChannelSizeById]

admedia = 400000000


; Node performance configuration
;
; write_flush_ms: Millisecond interval at which to flush the buffers of any
;   legacy stream requests.
; no_delay: Toggles Nagle's algorithm (true = disabled, false = enabled) on neo
;   connections.

[Performance]

write_flush_ms = 250
no_delay = false


; Stats logging configuration
;
; file_name: Location of logfile to write stats into.
; console_stats_enabled: Determines whether the DMQ node will output status
;   information to the console while running.

[Stats]

file_name = log/stats.log
console_stats_enabled = true


; Logger configuration
;
; level: Deepest logger level to output (error, warn, info, trace).
; propagate: Whether to propagate these settings to child loggers.
; console: Whether to output logging info to the console.
; file: Path of file to write logging info to.

[LOG.Root]

level = trace
propagate = true
console = false
file = log/root.log
