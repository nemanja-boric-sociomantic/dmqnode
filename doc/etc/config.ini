; Dht node configuration
;
; A dht node is a server that communicates via a binary protocol and stores
; data in a key/value storage. Data can be stored into different channels
; that are automatically created when a first insert command is sent to a
; specific channel. A dht node can store the data in different storage
; engines, currently memory or logfiles.


; Basic server configuration
;
; address               ip address on which the server should be listening
; port                  port on which the server should be listening
; pidfile               name of the PID file
; data_dir              directory where the data is stored
; storage_engine        storage engine that should be used for this node server:
;                       [memory, logfiles]
; size_limit            size limit for storage engine (should to be adequate for
;                       the choosen storage engine). If set to 0 no limit is 
;                       applied. size limit is set in bytes. Ignored by logiles.
; minval                Minimum hash value (key) handled by this node, specified
;                       as a hexadecimal integer (prepended with 0x). The hash
;                       value is padded out with additional 0s to the right if
;                       it is < 8 digits long.
; maxval                Maximum hash value (key) handled by this node, specified
;                       as a hexadecimal integer (prepended with 0x). The hash
;                       value is padded out with additional Fs to the right if
;                       it is < 8 digits long.

[Server]

address                 = 192.168.2.222
port                    = 10011
data_dir                = data
storage_engine          = memory
size_limit              = 3000000000
minval                  = 0x0
maxval                  = 0xf


; Memory storage engine configuration
;
; bnum                  specifies the number of elements of the bucket array.
;                       If it is not more than 0, the default value is used.
;                       The default value is 32749. Suggested size of the bucket
;                       array is about from 1 to 4 times of the number of all
;                       pages to be stored.

[Options_Memory]

bnum                    = 32749


; LogFiles storage engine configuration
;
; write_buffer_size     specifies the file output buffer size in bytes; default
;                       is 65536.

[Options_LogFiles]

write_buffer_size       = 65536


; Service threads configuration
;
; maintenance_period   specifies the number of seconds between each maintenance
;                      call (in the memory storage engine the maintenance call
;                      dumps the memory channels to disk)

[ServiceThreads]

maintenance_period      = 900


; Logging Configuration (deprecated, but still the only way to log this stuff,
; this should be moved to tango logging though)
;
; error_log              log for exceptions thrown in the server
; trace_log              trace log file for debugging purpose
; stats_log              stats log file for I/O info
; stats_log_enabled      dis/enables output to stats log
; stats_log_period       update time for stats log (seconds)
; console_stats_enabled  dis/enables console stats line
; console_echo_trace     toggles echoing of trace messages to the console
; console_echo_error     toggles echoing of error messages to the console

[Log]

error_log               = log/error.log
trace_log               = log/trace.log
stats_log               = log/stats.log
stats_log_enabled       = true
stats_log_period        = 10
console_stats_enabled   = true
console_echo_error      = true
console_echo_trace      = false


; Version logging
;
; By default the program version is logged in at log/version.log.
; If you want to change that, you can uncomment the following lines.
;
; The default_version_log option disables the default logging, you can leave
; that commented if you want the version number to be logged at the default
; location *and* anywhere else.
;
;[LOG]
;default_version_log = false
;[LOG.ocean.util.Main.version]
;file  = log/version.log
;level = info


; Tango logging configuration, not very useful right now, will be useful when
; all logging is done using Tango logging, for now is just for future reference.
;
; General logging configuration
;
; This configures the tango logging subsystem, these are the general options
; for all loggers.
;
; file_count		Number of files to keep while rotating the log file
; max_file_size		Maximum number of bytes stored in a file before
;                       rotating it
; buffer_size		Size used for the logging formatting buffer. If you see
; 			that log messages are being truncated, try increasing
; 			this size. By default (or specifying 0) it uses the
; 			2048 internal tango buffer. This size will be used for
; 			each logger, so the memory used will be buffer_size
; 			* loggers. So it might be a better idea to override
; 			this only for loggers that really need it.
;

;[LOG]
;file_count    = 10
;max_file_size = 10000000

; Specific logger configuration
;
; You can have one of this sections for each module that uses a tango logger.
; You can configure a logger adding a section named [LOG.sub.module]. The most
; useful modules are included as examples, but you can activate logging for
; other modules as well.
;
; [LOG.Root] is an special section which is used to configure all the loggers
; (see tango docs for details).
;
; console		Indicates if the log should be sent to the console (bool)
; file 			File where to write the logs
; level			The minimum level to log (trace, info, warn, error,
;			fatal, none)
; propagate		Tells the logger to propagate the level to sub-loggers.
; buffer_size		Size used for the logging formatting buffer. See the
;			comment in the general configuration for details. This
;			is not propagated to sub-loggers, even if 'propagate'
;			is true.

;[LOG.Root]
;console   = true
;file      = log/general.log
;level     = info
;propagate = true

