; Dht Node Configuration
;
; A dht node is a server that communicates via a binary protocol and stores
; data in a key/value store. Each node is responsible for a specific hash
; range. By default a dht node supports to storage engines: memory and.
; logfile.
;
; (c) 2009-2011 sociomantic labs GmbH. All rights reserved.


; Node configuration
;
; address               dht node address top bind to
; port                  port to listen on
; storage_engine        type of storage engine used (memory or logfiles)
; data_dir              location of data directory
; minval                minimum hash responsibility range
; maxval                maxmimum hash responsibility range
; connection_limit      maximum number of accepted connections

[Server]

address                 = 5.9.12.207
port                    = 36424
storage_engine          = memory
data_dir                = data
minval                  = 0xB333333333333336
maxval                  = 0xC000000000000002
connection_limit        = 5000


; Node performance configuration
;
; write_flush_ms        millisecond interval at which to flush the buffers of
;                       any stream requests

[Performance]

write_flush_ms          = 250


; Memory node configuration
;
; size_limit    dht node size limit in bytes (0 = no limit)
; dump_period   specifies the number of seconds between each channel dump
; bnum          number of buckets to allocate in each channel - this value is
;               passed into tokyocabinet. (If not specified or 0, the default
;               value - as defined internally by TC - is used.)

[Options_Memory]

size_limit       = 0
dump_period      = 3600
bnum             = 0


; Stats output configuration
;
; logfile                 path of logfile to write stats to
; console_stats_enabled   determines whether the dht node will output status
;                         information to the console while running

[Stats]

logfile = log/stats.log
console_stats_enabled = true


; Version logging
;
; By default the program version is logged in at log/version.log.
; If you want to change that, you can uncomment the following lines.
;
; The default_version_log option disables the default logging, you can leave
; that commented if you want the version number to be logged at the default
; location *and* anywhere else.

;[VERSION]
;default_version_log = false
;[LOG.ocean.util.Main.version]
;file  = log/version.log
;level = info


; Tango logging configuration, not very useful right now, will be useful when
; all logging is done using Tango logging, for now is just for future reference.
;
; General logging configuration
;
; This configures the tango logging subsystem, these are the general options
; for all loggers.
;
; file_count		Number of files to keep while rotating the log file
; max_file_size		Maximum number of bytes stored in a file before
;                       rotating it
; buffer_size		Size used for the logging formatting buffer. If you see
; 			that log messages are being truncated, try increasing
; 			this size. By default (or specifying 0) it uses the
; 			2048 internal tango buffer. This size will be used for
; 			each logger, so the memory used will be buffer_size
; 			* loggers. So it might be a better idea to override
; 			this only for loggers that really need it.

;[LOG]
;file_count    = 10
;max_file_size = 10000000

; Specific logger configuration
;
; You can have one of this sections for each module that uses a tango logger.
; You can configure a logger adding a section named [LOG.sub.module]. The most
; useful modules are included as examples, but you can activate logging for
; other modules as well.
;
; [LOG.Root] is a special section which is used to configure all the loggers
; (see tango docs for details).
;
; console		Indicates if the log should be sent to the console (bool)
; file 			File where to write the logs
; level			The minimum level to log (trace, info, warn, error, fatal, none)
; propagate		Tells the logger to propagate the level to sub-loggers.
; buffer_size	Size used for the logging formatting buffer. See the
;			comment in the general configuration for details. This
;			is not propagated to sub-loggers, even if 'propagate'
;			is true.

;[LOG.Root]
console   = false
file      = log/root.log
level     = trace
propagate = true


